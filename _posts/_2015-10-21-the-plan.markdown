---
layout: post
title:  "the plan"
date:   2015-10-04 12:31:33
categories: jekyll update
---

I'm going to write a programming language. 
It's called pear.

# Syntax

The goal is simplicity and clarity.

## Functions

Functions can be defined in two ways: 

{% highlight haskell %}
square a = a * a

function square { a | 
  return a * a
}

{% endhighlight %}

Functions are called without parentheses

{% highlight haskell %}
square 2 # => 4
{% endhighlight %}

Variables are easy too:

{% highlight haskell %}
a = 2
{% endhighlight %}

You might see a problem here. Functions can have the same syntax as variables.
How does one make a function that takes no parameters? You have to use the `function` function.

{% highlight haskell %}
function important_question {
  print "What's your favorite fruit?"
}
{% endhighlight %}

Wait, did you just say `function` isn't a keyword? 

That's right, `function square { ... }` is an alias for the syntax `square = { ... }`. Not only that, if you wanted to, you could make a function that's called in just just the same way and does the same thing, you can: `your_function square { ... }`. See fake macros.


## Basic Types

### Blocks

A block is an anonymous function. You can pass parameters to a block with the syntax `{ a | ... }`. 

### Lists

There are no commas in lists, spaces only separate things. So if you want to call a function, you have to put it in parentheses.
{% highlight clojure %}
[2 3 4 5]
[2 3 (square 2) (2 + 3)]
{% endhighlight %}

### Integers, Floats, Rationals, Imaginary

{% highlight haskell %}
a = 1
b = 1.0
c = 2//3
d = 3.5i
e = 2 + 3i
{% endhighlight %}

Imaginary numbers are written as an integer, float, or rational with an 'i' afterwords.

To get a complex number just add a real one to the imaginary part.

### Strings, Chars

{% highlight haskell %}
a = "hello there"
b = "hi"
c = format "{} there" b
d = 'c' # a character
{% endhighlight %}

## Fake Macros

The arguments specified are not evaluated. The function receives them as a raw string.

{% highlight haskell %}
fakemacro print_args [a b] { a b c d |
  print a b c d
}

hello = 1
wow = 2

print_args hello (2 * 2) wow (2 * 2) # => "hello (2 * 2) 2 4"
{% endhighlight %}

This is nice for building domain specific languages and cool tricks, but not much else.

## Real Macros
